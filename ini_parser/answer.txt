1.是否有资源泄漏？文件句柄未关闭？
	没有内存泄漏，关于文件句柄，parse(const std::string& ini_file_path)函数里面打开文件之后在函数结尾有infile.close()。
2.各个函数的时间复杂度和空间复杂度分析。
  bool INIParser::Parse(const std::string& ini_file_path)：
    遍历一次找出各个数据块，以送到Parse(const char* ini_data, size_t ini_data_len, const std::string& line_seperator, const std::string& key_value_seperator)处理
    时间复杂度为O(n)，由于需要建一个string对象保存数据块，空间复杂度为O(n)。
    
  bool INIParser::Parse(const char* ini_data, size_t ini_data_len, const std::string& line_seperator, const std::string& key_value_seperator)：
    对数据块进行分段找出[key1=value1,key2=value2,....]，并解析出key和对应的value放入map，由于是遍历一次，时间复杂度为O(n)
    假设字符串的长度为n，额外使用了2n的空间，所以空间复杂度为O(n)。
    
  const std::string& INIParser::Get(const std::string& section, const std::string& key, bool* found)：
    遍历map找出给定的section和key所对应的value值，字符串长度为n时，map的长度小于n，遍历map的时间复杂度为O(n)
    只用一个sectionName变量存了去除空格后的section，所以空间复杂度为O(1)。
    
  const std::string& INIParser::Get(const std::string& key, bool* found)：
    遍历map找出给定的section和key所对应的value值，字符串长度为n时，map的长度小于n，遍历map的时间复杂度为O(n)
    只用了一个section变量来存储默认的section值，所以空间复杂度为O(1)。
    
  stringvector Slice(const char* ini_data, size_t ini_data_len, const std::string& line_seperator)：
    遍历除去[section]的剩余字符串或者本来就不包含[section]的字符串，搜集key=value存入stringvector中，由于是遍历一次，时间复杂度为O(n)
    使用stringvector存储key=value，所以空间复杂度为O(n)。
    
  std::string restrip(std::string s):
    去掉字符串s的首尾的空格，从前遍历到非空格字符，从后遍历到非空格字符，时间复杂度为O(n)
    使用了一个space变量来存空格符“ ”，空间复杂度为O(1)。